/* global describe, it, expect, jest, beforeEach */

import PatchFactory from '../../../src/customizer/PatchFactory'
import DomainFactory from '../../../src/customizer/domains/DomainFactory'
import PatcherFactory from '../../../src/customizer/patchers/PatcherFactory'
import Patch from '../../../src/customizer/Patch'

const mockChanges = {
  testDomain: {
    change: 'this',
    literal: 48
  }
}

const mockDataFormat = {
  records: [
    'change',
    'this',
    'literal'
  ],
  columns: 1,
  spacing: 69,
  size: 1
}

const mockVersion = {
  checksum: {
    md5: 'foo',
    address: 0
  },
  offset: {
    testDomain: 42
  }
}

const mockAddChange = jest.fn()
const mockSetVersion = jest.fn()
jest.mock('../../../src/customizer/Patch', () => {
  return jest.fn().mockImplementation(() => {
    return {
      addChange: mockAddChange,
      setVersion: mockSetVersion
    }
  })
})

jest.mock('../../../src/customizer/patchers/PatcherFactory', () => jest.fn(() => {}))
const mockGetChanges = jest.fn(() => mockChanges.testDomain)
jest.mock('../../../src/customizer/domains/DomainFactory', () => {
  return jest.fn().mockImplementation(() => {
    return {
      ifInitialised: function (cb) { return cb() },
      addChanges: function () {},
      getChanges: mockGetChanges,
      getDataFormat: function () { return mockDataFormat }
    }
  })
})

beforeEach(() => jest.clearAllMocks())

describe('The PatchFactory method', () => {
  it('should return a PatcherFactory function.', async done => {
    await expect(PatchFactory(mockChanges, mockVersion)).resolves.toStrictEqual(PatcherFactory.mock.instances[0])
    done()
  })
  it('should get domains using the DomainFactory.', async done => {
    await PatchFactory(mockChanges, mockVersion)
    expect(DomainFactory).toHaveBeenCalledWith('testDomain')
    done()
  })
  it('should create a Patch with the calculated changes.', async done => {
    await PatchFactory(mockChanges, mockVersion)

    expect(mockSetVersion).toHaveBeenCalledWith(mockVersion)
    expect(mockAddChange).toHaveBeenCalledWith(42, 112)
    expect(mockAddChange).toHaveBeenCalledWith(182, '30')
    done()
  })
  it('should provide the PatcherFactory with the Patch.', async done => {
    await PatchFactory(mockChanges, mockVersion)
    expect(PatcherFactory).toHaveBeenCalledWith(new Patch(), null)
    done()
  })
  it('should read non-number literals as bytes.', async done => {
    mockGetChanges.mockImplementation(() => { return { literal: '0' } })
    await PatchFactory({
      testDomain: {
        literal: '0'
      }
    }, mockVersion)
    expect(mockAddChange).toHaveBeenCalledWith(182, '30')
    done()
  })
  it('should throw away excess bytes in a literal.', async done => {
    mockGetChanges.mockImplementation(() => { return { literal: 99999 } })
    await PatchFactory({
      testDomain: {
        literal: 99999
      }
    }, mockVersion)
    expect(mockAddChange).toHaveBeenCalledWith(182, '9f')
    done()
  })
})
